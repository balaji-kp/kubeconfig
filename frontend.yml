# Define a 'Persistent Voulume Claim'(PVC) for Mysql Storage, dynamically provisioned by cluster
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: frontend-pv-claim # name of PVC essential for identifying the storage data
  labels:
    app: frontend
    tier: frontend
spec:
  accessModes:
    - ReadWriteOnce   #This specifies the mode of the claim that we are trying to create.
  resources:
    requests:
      storage: 1Gi    #This will tell kubernetes about the amount of space we are trying to claim.
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: react-frontend
spec:
  selector:
    matchLabels:
      app: react-frontend
  replicas: 1
  template:
    metadata:
      labels:
        app: react-frontend
    spec:
      volumes:
        - name: frontend-persistent-storage # Obtaining 'vloume' from PVC
          persistentVolumeClaim:
            claimName: frontend-pv-claim
      containers:
        - name: react-frontend
          image: 01112021/react-frontend:nginx-13.235.31.106-8080 #/usr/share/nginx/html
          ports:
            - containerPort: 80
          resources:
            limits:
              cpu: 100m
            requests:
              cpu: 100m

          volumeMounts:        # Mounting voulume obtained from Persistent Volume Claim
            - name: frontend-persistent-storage
              mountPath: /usr/share/nginx/html #This is the path in the container on which the mounting will take place.
          
---

apiVersion: v1 # Kubernetes API version
kind: Service # Kubernetes resource kind we are creating
metadata: # Metadata of the resource kind we are creating
  name: react-frontend-svc
spec:
  selector:
    app: react-frontend
  ports:
    - port: 80 # The port that the service is running on in the cluster
      targetPort: 80 # The port exposed by the service
  type: LoadBalancer # type of the service.
